package net.minecraft.src;

import java.util.Random;

public class WorldStructureCommon {
	
	public void WorldGen(BiomeGenBase biome, World world, Random random, int i, int k){
		genSpiderDen(world, random, i, k);
		for(int p = 0; p < 2; p++)genSkeletonSpire(world, random, i, k);
		genZombieRoof(world, random, i, k);
		if(random.nextInt(3) == 0){
			genSpiderDen(world, random, i, k);
		}
		if(random.nextInt(50) == 0){
			genBeacon(world, random, i, k);
		}
		if(biome == BiomeGenBase.seasonalForest || biome == BiomeGenBase.forest || biome == BiomeGenBase.rainforest || biome == BiomeGenBase.swampland){
			genStump(world, random, i, k);
			if(random.nextInt(64) == 0) genLargeWell(world, random, i, k);
		}
		if(biome == BiomeGenBase.desert){
			if (random.nextInt(8) == 0)
			genDesertWaterTower(world, random, i, k);
		}
	}
	
	public int provideRandom(Random random, int[] array){
		int sum = 0, pick = 0;
		for(int i = 0; i < array.length/2; i++){
			sum += array[i*2+1];
		}
		int rand = random.nextInt(sum) + 1;
		sum = 0;
		for(int i = 0; i < array.length/2; i++){
			if(rand <= array[i*2+1] + sum){
				pick = i*2;
				break;
			}
			sum += array[i*2+1];
		}
		return array[pick];
		
	}
	
	void genBeacon(World world, Random random, int i, int k){
		WorldStructureStatic generator = new WorldStructureStatic();
		int x = i+8+random.nextInt(16);
		int y = 63 + random.nextInt(2);
		int z = k+8+random.nextInt(16);
		boolean flipped = random.nextBoolean();
		int checkArray[][] = {
				{0,0,4,4}, //x
				{0,1,0,1}, //y
				{0,0,4,4}, //z
				{-2,0,-2,0} //id
				};
		if(!generator.initCheck(checkArray, world, x, y, z, flipped)) return;
		int reqArray[][][] = {{
			{-2,-2,-2,-2,-2},{-2,-2,-2,-2,-2},{-2,-2,-2,-2,-2},{-2,-2,-2,-2,-2},{-2,-2,-2,-2,-2}},{
			{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{
			{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{
			{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{
			{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{
			{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{
			{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{
			{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}}};
		if(!generator.fullCheck(reqArray, world, x, y, z, flipped)) return;
		int genArray[][][] = {{
			{-1,1,1,1,-1},{1,1,1,1,1},{1,1,1,1,1},{1,1,1,1,1},{-1,1,1,1,-1},},{
			{0,0,0,0,0},{0,44,4,44,0},{0,150,49,150,0},{0,44,225,44,0},{0,0,0,0,0}},{
			{0,0,0,0,0},{0,0,150,0,0},{0,4,49,225,0},{0,0,150,0,0},{0,0,0,0,0}},{
			{0,0,0,0,0},{0,44,225,44,0},{0,150,49,150,0},{0,44,4,44,0},{0,0,0,0,0}},{
			{0,0,0,0,0},{0,0,150,0,0},{0,225,49,4,0},{0,0,150,0,0},{0,0,0,0,0}},{
			{0,0,0,0,0},{0,0,44,0,0},{0,44,49,44,0},{0,0,44,0,0},{0,0,0,0,0}},{
			{0,0,0,0,0},{0,0,0,0,0},{0,0,49,0,0},{0,0,0,0,0},{0,0,0,0,0}},{
			{0,0,0,0,0},{0,0,0,0,0},{0,0,89,0,0},{0,0,0,0,0},{0,0,0,0,0}}};
		generator.generate(genArray, null, world, random, x, y, z, flipped);
	}
	
	void genLargeWell(World world, Random random, int i, int k){
		WorldStructureStatic generator = new WorldStructureStatic();
		int x = i+8+random.nextInt(16);
		int y = 64 + random.nextInt(8);
		int z = k+8+random.nextInt(16);
		boolean flipped = random.nextBoolean();
		int checkArray[][] = {
				{1,1,7,7,1,1,7,7}, //x
				{5,8,5,8,5,8,5,8}, //y
				{1,1,7,7,7,7,1,1}, //z
				{-2,0,-2,0,-2,0,-2,0} //id, -2 if needs to be solid
				};
		if(!generator.initCheck(checkArray, world, x, y, z, flipped)) return;
		int reqArray[][][] = {{
			{-1,-1,-1,-1,-1,-1,-1,-1,-1},{-1,-1,-1,-2,-2,-2,-1,-1,-1},{-1,-1,-2,-2,-2,-2,-2,-1,-1},{-1,-2,-2,-1,-1,-1,-2,-2,-1},{-1,-2,-2,-1,-1,-1,-2,-2,-1},{-1,-2,-2,-1,-1,-1,-2,-2,-1},{-1,-1,-2,-2,-2,-2,-2,-1,-1},{-1,-1,-1,-2,-2,-2,-1,-1,-1},{-1,-1,-1,-1,-1,-1,-1,-1,-1}},{
			{-1,-1,-1,-1,-1,-1,-1,-1,-1},{-1,-1,-1,-2,-2,-2,-1,-1,-1},{-1,-1,-2,-2,-2,-2,-2,-1,-1},{-1,-2,-2,-1,-1,-1,-2,-2,-1},{-1,-2,-2,-1,-1,-1,-2,-2,-1},{-1,-2,-2,-1,-1,-1,-2,-2,-1},{-1,-1,-2,-2,-2,-2,-2,-1,-1},{-1,-1,-1,-2,-2,-2,-1,-1,-1},{-1,-1,-1,-1,-1,-1,-1,-1,-1}},{
			{-1,-1,-1,-1,-1,-1,-1,-1,-1},{-1,-1,-1,-2,-2,-2,-1,-1,-1},{-1,-1,-2,-2,-2,-2,-2,-1,-1},{-1,-2,-2,-1,-1,-1,-2,-2,-1},{-1,-2,-2,-1,-1,-1,-2,-2,-1},{-1,-2,-2,-1,-1,-1,-2,-2,-1},{-1,-1,-2,-2,-2,-2,-2,-1,-1},{-1,-1,-1,-2,-2,-2,-1,-1,-1},{-1,-1,-1,-1,-1,-1,-1,-1,-1}},{
			{-1,-1,-1,-2,-2,-2,-1,-1,-1},{-1,-1,-2,-2,-2,-2,-2,-1,-1},{-1,-2,-2,-1,-1,-1,-2,-2,-1},{-2,-2,-1,-1,-1,-1,-1,-2,-2},{-2,-2,-1,-1,-1,-1,-1,-2,-2},{-2,-2,-1,-1,-1,-1,-1,-2,-2},{-1,-2,-2,-1,-1,-1,-2,-2,-1},{-1,-1,-2,-2,-2,-2,-2,-1,-1},{-1,-1,-1,-2,-2,-2,-1,-1,-1}},{
			{-1,-1,-2,-2,-2,-2,-2,-1,-1},{-1,-2,-2,-2,-2,-2,-2,-2,-1},{-2,-2,-1,-1,-1,-1,-1,-2,-2},{-2,-2,-1,-1,-1,-1,-1,-2,-2},{-2,-2,-1,-1,-1,-1,-1,-2,-2},{-2,-2,-1,-1,-1,-1,-1,-2,-2},{-2,-2,-1,-1,-1,-1,-1,-2,-2},{-1,-2,-2,-2,-2,-2,-2,-2,-1},{-1,-1,-2,-2,-2,-2,-2,-1,-1}},{
			{-1,-2,-2,-2,-2,-2,-2,-2,-1},{-2,-2,-2,-2,-2,-2,-2,-2,-2},{-2,-2,-1,-1,-1,-1,-1,-2,-2},{-2,-2,-1,-1,-1,-1,-1,-2,-2},{-2,-2,-1,-1,-1,-1,-1,-2,-2},{-2,-2,-1,-1,-1,-1,-1,-2,-2},{-2,-2,-1,-1,-1,-1,-1,-2,-2},{-2,-2,-2,-2,-2,-2,-2,-2,-2},{-1,-2,-2,-2,-2,-2,-2,-2,-1}}};
		if(!generator.fullCheck(reqArray, world, x, y, z, flipped)) return;
		int genArray[][][] = {{
			{-1,-1,-1,-1,-1,-1,-1,-1,-1},{-1,-1,-1,-1,-1,-1,-1,-1,-1},{-1,-1,-1,49,49,49,-1,-1,-1},{-1,-1,49,49,49,49,49,-1,-1},{-1,-1,49,49,49,49,49,-1,-1},{-1,-1,49,49,49,49,49,-1,-1},{-1,-1,-1,49,49,49,-1,-1,-1},{-1,-1,-1,-1,-1,-1,-1,-1,-1},{-1,-1,-1,-1,-1,-1,-1,-1,-1}},{
			{-1,-1,-1,-1,-1,-1,-1,-1,-1},{-1,-1,-1,-1,-1,-1,-1,-1,-1},{-1,-1,-1,49,49,49,-1,-1,-1},{-1,-1,49,0,0,0,49,-1,-1},{-1,-1,49,0,181,0,49,-1,-1},{-1,-1,49,0,0,0,49,-1,-1},{-1,-1,-1,49,49,49,-1,-1,-1},{-1,-1,-1,-1,-1,-1,-1,-1,-1},{-1,-1,-1,-1,-1,-1,-1,-1,-1}},{
			{-1,-1,-1,-1,-1,-1,-1,-1,-1},{-1,-1,-1,-1,-1,-1,-1,-1,-1},{-1,-1,-1,49,49,49,-1,-1,-1},{-1,-1,49,0,0,0,49,-1,-1},{-1,-1,49,0,41,0,49,-1,-1},{-1,-1,49,0,0,0,49,-1,-1},{-1,-1,-1,49,49,49,-1,-1,-1},{-1,-1,-1,-1,-1,-1,-1,-1,-1},{-1,-1,-1,-1,-1,-1,-1,-1,-1}},{
			{-1,-1,-1,-1,-1,-1,-1,-1,-1},{-1,-1,-1,-1,-1,-1,-1,-1,-1},{-1,-1,-1,49,49,49,-1,-1,-1},{-1,-1,49,0,0,0,49,-1,-1},{-1,-1,49,0,0,0,49,-1,-1},{-1,-1,49,0,0,0,49,-1,-1},{-1,-1,-1,49,49,49,-1,-1,-1},{-1,-1,-1,-1,-1,-1,-1,-1,-1},{-1,-1,-1,-1,-1,-1,-1,-1,-1}},{
			{-1,-1,-1,-1,-1,-1,-1,-1,-1},{-1,-1,-1,-1,-1,-1,-1,-1,-1},{-1,-1,-1,49,49,49,-1,-1,-1},{-1,-1,49,0,0,0,49,-1,-1},{-1,-1,49,0,0,0,49,-1,-1},{-1,-1,49,0,0,0,49,-1,-1},{-1,-1,-1,49,49,49,-1,-1,-1},{-1,-1,-1,-1,-1,-1,-1,-1,-1},{-1,-1,-1,-1,-1,-1,-1,-1,-1}},{
			{2,2,2,2,2,2,2,2,2},{2,2,-1,-1,-1,-1,-1,2,2},{2,-1,-1,225,225,225,-1,-1,2},{2,-1,225,0,0,0,225,-1,2},{2,-1,225,0,0,0,225,-1,2},{2,-1,225,0,0,0,225,-1,2},{2,-1,-1,225,225,225,-1,-1,2},{2,2,-1,-1,-1,-1,-1,2,2},{2,2,2,2,2,2,2,2,2}},{
			{-1,0,0,0,0,0,0,18,-1},{0,18,151,151,151,151,151,17,18},{18,151,225,0,0,0,225,151,18},{0,151,0,0,0,0,0,151,0},{0,151,0,0,0,0,0,151,0},{0,151,0,0,0,0,0,151,0},{18,151,225,0,0,0,225,151,0},{0,18,151,151,151,151,151,0,0},{-1,0,0,0,0,0,0,0,-1}},{
			{-1,0,0,0,0,0,0,0,-1},{0,18,0,0,0,0,18,18,0},{18,17,225,0,0,0,225,0,0},{0,18,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0},{0,18,0,0,0,0,0,0,0},{18,17,225,0,0,0,225,0,0},{0,18,18,0,0,0,0,0,0},{-1,0,0,0,0,0,0,0,-1}},{
			{-1,0,0,0,0,0,0,0,-1},{0,0,0,0,0,0,0,0,0},{0,18,225,0,0,0,225,0,0},{0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0},{0,18,225,0,0,0,225,0,0},{0,0,0,0,0,0,0,0,0},{-1,0,0,0,0,0,0,0,-1}},{
			{0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0},{0,0,225,18,0,0,225,0,0},{0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0},{0,0,225,0,0,0,225,0,0},{0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0}},{
			{-1,-1,-1,-1,225,-1,-1,-1,-1},{-1,-1,-1,-1,-1,-1,-1,-1,-1},{-1,-1,225,18,-1,-1,225,-1,-1},{-1,-1,-1,-1,-1,-1,-1,-1,-1},{225,-1,-1,-1,-1,-1,-1,-1,225},{-1,-1,-1,-1,-1,-1,18,-1,-1},{-1,-1,225,-1,-1,-1,225,-1,-1},{-1,-1,-1,-1,-1,-1,-1,-1,-1},{-1,-1,-1,-1,225,-1,-1,-1,-1}},{
			{-1,-1,-1,-1,-1,-1,-1,-1,-1},{-1,-1,-1,225,225,225,-1,-1,-1},{-1,-1,225,17,18,-1,225,-1,-1},{-1,225,18,18,-1,-1,-1,225,-1},{-1,225,-1,18,89,-1,18,225,-1},{-1,225,-1,-1,18,18,17,225,-1},{-1,18,225,-1,-1,18,225,-1,-1},{-1,-1,-1,225,225,225,-1,-1,-1},{-1,-1,-1,-1,-1,-1,-1,-1,-1}},{
			{-1,-1,-1,-1,-1,-1,-1,-1,-1},{-1,-1,-1,-1,-1,-1,-1,-1,-1},{-1,-1,-1,151,151,151,-1,-1,-1},{-1,-1,151,151,89,151,151,-1,-1},{-1,-1,151,89,89,89,151,-1,-1},{-1,-1,151,151,89,151,151,-1,-1},{-1,18,17,151,151,151,-1,-1,-1},{-1,-1,-1,-1,-1,-1,-1,-1,-1},{-1,-1,-1,-1,-1,-1,-1,-1,-1}},{
			{-1,-1,-1,-1,-1,-1,-1,-1,-1},{-1,-1,-1,-1,-1,-1,-1,-1,-1},{-1,-1,-1,-1,18,18,-1,-1,-1},{-1,-1,-1,-1,151,17,18,-1,-1},{-1,-1,-1,151,151,151,-1,-1,-1},{-1,-1,-1,-1,151,-1,-1,-1,-1},{-1,-1,18,18,-1,-1,-1,-1,-1},{-1,-1,-1,-1,-1,-1,-1,-1,-1},{-1,-1,-1,-1,-1,-1,-1,-1,-1}},{
			{-1,-1,-1,-1,-1,-1,-1,-1,-1},{-1,-1,-1,-1,-1,-1,-1,-1,-1},{-1,-1,-1,-1,-1,-1,-1,-1,-1},{-1,-1,-1,-1,18,18,-1,-1,-1},{-1,-1,-1,-1,-1,18,-1,-1,-1},{-1,-1,-1,-1,-1,-1,-1,-1,-1},{-1,-1,-1,-1,-1,-1,-1,-1,-1},{-1,-1,-1,-1,-1,-1,-1,-1,-1},{-1,-1,-1,-1,-1,-1,-1,-1,-1}}
		};
		generator.generate(genArray, null, world, random, x, y, z, flipped);
	}
	
	void genDesertWaterTower(World world, Random random, int i, int k){
		WorldStructureStatic generator = new WorldStructureStatic();
		int x = i+8+random.nextInt(16);
		int y = 65 + random.nextInt(8);
		int z = k+8+random.nextInt(16);
		int checkArray[][] = {
				{1,1,10,10,1,1,10,10}, //x
				{1,3,1,3,1,3,1,3}, //y
				{1,1,6,6,6,6,1,1}, //z
				{-2,0,-2,0,-2,0,-2,0} //id, -2 if needs to be solid
				};
		if(!generator.initCheck(checkArray, world, x, y, z, false)) return;
		int reqArray[][][] = {{
			{-2,-2,-2,-2,-2,-2,-2,-2},{-2,-2,-2,-2,-2,-2,-2,-2},{-2,-2,-2,-2,-2,-2,-2,-2},{-2,-2,-2,-2,-2,-2,-2,-2},{-2,-2,-2,-2,-2,-2,-2,-2},{-2,-2,-2,-2,-2,-2,-2,-2},{-2,-2,-2,-2,-2,-2,-2,-2},{-2,-2,-2,-2,-2,-2,-2,-2},{-2,-2,-2,-2,-2,-2,-2,-2},{-2,-2,-2,-2,-2,-2,-2,-2},{-2,-2,-2,-2,-2,-2,-2,-2},{-2,-2,-2,-2,-2,-2,-2,-2}},{
			{-1,-1,-1,-1,-1,-1,-1,-1},{-1,-1,-1,-1,-1,-1,-1,-1},{-1,-1,-1,-1,-1,-1,-1,-1},{-1,-1,-1,-1,-1,-1,-1,-1},{-1,-1,-1,-1,-1,-1,-1,-1},{-1,-1,-1,-1,-1,-1,-1,-1},{-1,-1,-1,-1,-1,-1,-1,-1},{-1,-1,-1,-1,-1,-1,-1,-1},{-1,-1,-1,-1,-1,-1,-1,-1},{-1,-1,-1,-1,-1,-1,-1,-1},{-1,-1,-1,-1,-1,-1,-1,-1},{-1,-1,-1,-1,-1,-1,-1,-1}},{
			{-1,-1,0,0,0,0,-1,-1},{-1,0,0,0,0,0,0,-1},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{-1,0,0,0,0,0,0,-1},{-1,-1,0,0,0,0,-1,-1}},{
			{-1,-1,0,0,0,0,-1,-1},{-1,0,0,0,0,0,0,-1},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{-1,0,0,0,0,0,0,-1},{-1,-1,0,0,0,0,-1,-1}},{
			{-1,-1,0,0,0,0,-1,-1},{-1,0,0,0,0,0,0,-1},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{-1,0,0,0,0,0,0,-1},{-1,-1,0,0,0,0,-1,-1}},{
			{-1,-1,0,0,0,0,-1,-1},{-1,0,0,0,0,0,0,-1},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{-1,0,0,0,0,0,0,-1},{-1,-1,0,0,0,0,-1,-1}},{
			{-1,-1,0,0,0,0,-1,-1},{-1,0,0,0,0,0,0,-1},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{-1,0,0,0,0,0,0,-1},{-1,-1,0,0,0,0,-1,-1}},{
			{-1,-1,0,0,0,0,-1,-1},{-1,0,0,0,0,0,0,-1},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{-1,0,0,0,0,0,0,-1},{-1,-1,0,0,0,0,-1,-1}},{
			{-1,-1,0,0,0,0,-1,-1},{-1,0,0,0,0,0,0,-1},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{-1,0,0,0,0,0,0,-1},{-1,-1,0,0,0,0,-1,-1}},{
			{-1,-1,0,0,0,0,-1,-1},{-1,0,0,0,0,0,0,-1},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{-1,0,0,0,0,0,0,-1},{-1,-1,0,0,0,0,-1,-1}},{
			{-1,-1,0,0,0,0,-1,-1},{-1,0,0,0,0,0,0,-1},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{-1,0,0,0,0,0,0,-1},{-1,-1,0,0,0,0,-1,-1}},{
			{-1,-1,0,0,0,0,-1,-1},{-1,0,0,0,0,0,0,-1},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{-1,0,0,0,0,0,0,-1},{-1,-1,0,0,0,0,-1,-1}},{
			{-1,-1,0,0,0,0,-1,-1},{-1,0,0,0,0,0,0,-1},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{-1,0,0,0,0,0,0,-1},{-1,-1,0,0,0,0,-1,-1}},{
			{-1,-1,0,0,0,0,-1,-1},{-1,0,0,0,0,0,0,-1},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{-1,0,0,0,0,0,0,-1},{-1,-1,0,0,0,0,-1,-1}},{
			{-1,-1,0,0,0,0,-1,-1},{-1,0,0,0,0,0,0,-1},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{-1,0,0,0,0,0,0,-1},{-1,-1,0,0,0,0,-1,-1}},{
			{-1,-1,0,0,0,0,-1,-1},{-1,0,0,0,0,0,0,-1},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{-1,0,0,0,0,0,0,-1},{-1,-1,0,0,0,0,-1,-1}}};
		if(!generator.fullCheck(reqArray, world, x, y, z, false)) return;
		int genArray[][][] = {
			{{-1,-1,-1,-1,-1,-1,-1,-1},{-1,-1,-1,-1,-1,-1,-1,-1},{-1,-1,-1,-1,-1,-1,-1,-1},{-1,-1,-1,-1,-1,-1,-1,-1},{-1,-1,-1,-1,-1,-1,-1,-1},{-1,-1,-1,-1,-1,-1,-1,-1},{-1,-1,-1,-1,-1,-1,-1,-1},{-1,-1,-1,-1,-1,-1,-1,-1},{-1,-1,-1,-1,-1,-1,-1,-1},{-1,-1,-1,-1,-1,-1,-1,-1},{-1,-1,-1,-1,-1,-1,-1,-1},{-1,-1,-1,-1,-1,-1,-1,-1}},
			{{-1,-1,12,12,8,12,-1,-1},{-1,12,12,12,8,8,12,-1},{12,12,12,12,8,12,12,12},{12,12,12,12,8,8,8,12},{12,12,12,8,8,12,8,12},{12,12,12,12,8,12,12,12},{12,12,12,12,12,12,12,12},{12,12,12,12,12,12,12,12},{12,12,12,12,12,12,12,12},{12,12,12,12,12,12,12,12},{-1,12,12,12,12,12,12,-1},{-1,-1,12,12,12,12,-1,-1}},
			{{-1,-1,0,0,0,0,-1,-1},{-1,0,0,0,0,0,0,-1},{0,0,0,81,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,81,0,0,81,0,0},{0,0,0,0,0,0,0,18},{18,18,223,0,0,0,223,18},{18,0,0,0,0,0,0,0},{0,0,0,0,223,0,0,0},{0,18,0,0,18,18,0,0},{0,18,223,0,0,18,223,0},{-1,0,0,0,0,0,0,-1}},
			{{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,81,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,81,0,0,81,0,0},{0,0,0,0,0,0,0,0},{0,18,17,0,0,0,17,18},{0,0,0,0,0,0,0,0},{0,0,0,0,17,0,0,0},{0,0,0,0,18,0,0,0},{0,18,17,0,0,0,17,0},{0,0,0,0,0,0,0,0}},
			{{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,81,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,81,0,0,81,0,0},{18,0,0,0,0,0,0,0},{18,18,17,0,0,0,17,0},{0,0,0,0,0,0,18,0},{0,0,0,0,17,0,18,0},{0,0,0,0,0,0,0,0},{0,0,17,0,0,0,17,0},{0,0,0,0,0,0,0,0}},
			{{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,18,17,44,0,44,17,0},{0,18,44,0,53,0,44,0},{0,0,44,53,17,53,44,0},{0,0,0,0,53,0,44,0},{0,0,17,44,44,44,17,0},{0,0,0,0,0,0,0,0}},
			{{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,18,17,0,0,0,17,0},{0,0,18,0,0,0,0,0},{0,0,0,0,17,0,0,0},{0,0,0,0,0,0,0,0},{0,0,17,0,0,0,44,0},{0,0,18,18,0,0,0,0}},
			{{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,18,0,0,0,0,0},{0,18,17,0,0,0,17,0},{0,0,0,0,0,0,0,0},{0,0,0,0,17,0,0,0},{0,0,0,0,0,0,0,0},{0,0,17,0,0,0,18,0},{0,0,0,18,0,0,0,0}},
			{{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,18,0,0,0,18,0},{0,0,17,0,0,0,17,0},{0,0,0,0,0,0,0,0},{0,0,0,0,17,0,0,0},{0,0,0,0,0,0,0,0},{0,0,17,0,0,0,17,0},{0,0,0,0,0,0,0,0}},
			{{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,18,0,0,0,0,0},{0,0,17,44,44,44,17,0},{0,0,0,0,53,0,44,0},{0,0,44,53,17,53,44,0},{0,0,44,0,53,0,18,0},{0,0,17,44,44,44,17,0},{0,0,0,0,0,0,0,0}},
			{{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,18,0,0,0,0},{0,0,18,18,0,0,0,0},{0,0,17,0,0,0,17,0},{0,0,0,0,0,0,0,0},{0,0,0,0,17,0,0,0},{0,0,0,0,0,0,0,0},{0,0,17,0,18,0,17,0},{0,0,0,0,0,0,0,0}},
			{{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,18,0,0,18,0},{0,18,17,0,0,0,17,18},{0,18,0,43,43,43,0,0},{0,0,0,43,43,43,0,0},{0,0,0,43,43,43,0,0},{0,18,17,0,18,18,17,0},{0,0,0,0,0,18,18,0}},
			{{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,18,0,0,0,0},{0,0,67,43,43,43,67,18},{0,18,43,13,43,43,43,18},{0,0,43,43,13,13,43,0},{0,0,43,43,43,43,43,0},{0,18,67,43,43,43,67,0},{0,0,0,0,0,0,0,0}},
			{{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,43,8,43,0,0},{0,18,43,9,9,9,43,18},{0,0,43,4,9,9,43,0},{0,18,43,4,4,4,43,0},{0,18,0,43,43,43,0,0},{0,0,0,0,0,0,0,0}},
			{{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,44,0,0,0},{0,0,0,43,43,43,0,0},{0,0,43,9,9,9,43,0},{0,0,44,9,9,9,43,0},{0,0,43,4,9,9,43,0},{0,18,0,43,43,43,0,0},{0,0,0,0,0,0,0,0}},
			{{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,43,43,44,0,0},{0,0,43,0,0,0,43,0},{0,0,43,0,0,0,43,0},{0,0,43,0/*Chest*/,0,0,43,0},{0,0,0,43,43,43,0,0},{0,0,0,0,0,0,0,0}},
			{{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,44,0,0,0,0},{0,0,0,44,43,0,0,0},{0,0,0,44,44,44,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0}},};
		int specialArray[][] = {
			{9, 8, 8, 9, 8, 8, 6, 10, 6, 10, 10, 10, 10, 10, 10, 10, 10, 9, 8, 7, 8, 7, 6, 6, 6, 6, 6, 9, 8, 8, 7, 9},
			{5, 5, 5, 9, 9, 9, 12, 12, 12, 12, 6, 5, 5, 5, 9, 9, 9, 5, 5, 5, 9, 9, 9, 9, 9, 5, 5, 9, 9, 5, 5, 15},
			{4, 3, 5, 4, 3, 5, 2, 2, 6, 6, 6, 5, 4, 3, 5, 4, 3, 6, 6, 6, 6, 6, 5, 4, 3, 5, 3, 2, 2, 2, 2, 3},
			{1, 2, 3, 1, 2, 3, 2, 2, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0}
		};
		generator.generate(genArray, specialArray, world, random, x, y, z, false);
	}
	
	void genStump(World world, Random random, int i, int k){
		WorldStructureStatic generator = new WorldStructureStatic();
		int x = i+8+random.nextInt(16);
		int y = 60 + random.nextInt(60);
		int z = k+8+random.nextInt(16);
		int checkArray[][] = {
				{1,1}, //x
				{0,3}, //y
				{1,1}, //z
				{2,0} //id
				};
		if(!generator.initCheck(checkArray, world, x, y, z, false)) return;
		int reqArray[][][] = {{
			{-1,-2,-1},{-2,2,-2},{-1,-2,-1}},{
			{-1,0,-1},{0,0,0},{-1,0,-1}},{
			{-1,-1,-1},{-1,0,-1},{-1,-1,-1}},{
			{-1,-1,-1},{-1,0,-1},{-1,-1,-1}}};
		if(!generator.fullCheck(reqArray, world, x, y, z, false)) return;
		int sidemushroom[] = {0, 5, 39, 4, 40, 1};
		int topmushroom[] = {0, 50, 39, 850, 40, 99, 229, 1};
		int genArray[][][] = {{
			{-1,-1,-1},{-1,-1,-1},{-1,-1,-1}},{
			{-1,provideRandom(random, sidemushroom),-1},{provideRandom(random, sidemushroom),17,provideRandom(random, sidemushroom)},{-1,provideRandom(random, sidemushroom),-1}},{
			{-1,-1,-1},{-1,provideRandom(random, topmushroom),-1},{-1,-1,-1}}};
		generator.generate(genArray, null, world, random, x, y, z, false);
	}
	
	void genZombieRoof(World world, Random random, int i, int k){
		WorldStructureStatic generator = new WorldStructureStatic();
		int x = i+8+random.nextInt(16);
		int y = 16 + random.nextInt(48);
		int z = k+8+random.nextInt(16);
		int checkArray[][] = {
				{3,2,4}, //x
				{0,2,2}, //y
				{3,2,4}, //z
				{0,-3,-3} //id
				};
		if(!generator.initCheck(checkArray, world, x, y, z, false)) return;
		int reqArray[][][] = {{
			{-1, -1, -1, -1, -1, -1, -1},{-1, -1, -1, -1, -1, -1, -1},{-1, -1, -1, 0, -1, -1, -1},{-1, -1, 0, 0, 0, -1, -1},{-1, -1, -1, 0, -1, -1, -1},{-1, -1, -1, -1, -1, -1, -1},{-1, -1, -1, -1, -1, -1, -1}},{
			{-1, -1, -1, -1, -1, -1, -1},{-1, -1, -1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1, -1, -1},{-1, -1, -1, -1, -1, -1, -1},{-1, -1, -1, -1, -1, -1, -1},{-1, -1, -1, -1, -1, -1, -1},{-1, -1, -1, -1, -1, -1, -1}},{
			{-1, -1, -1, -1, -1, -1, -1},{-1, -1, -1, -1, -1, -1, -1}, {-1, -1, -3, -3, -3, -1, -1},{-1, -1, -3, -3, -3, -1, -1},{-1, -1, -3, -3, -3, -1, -1},{-1, -1, -1, -1, -1, -1, -1},{-1, -1, -1, -1, -1, -1, -1}}};
		if(!generator.fullCheck(reqArray, world, x, y, z, false)) return;
		int genArray[][][] = {{
				{-1, -1, -1, -1, -1, -1, -1},{-1, -1, -1, -1, -1, -1, -1},{-1, -1, -1, -1, -1, -1, -1},{-1, -1, -1, -1, -1, -1, -1},{-1, -1, -1, -1, -1, -1, -1},{-1, -1, -1, -1, -1, -1, -1},{-1, -1, -1, -1, -1, -1, -1}},{
				{-1, -1, -1, -1, -1, -1, -1},{-1, 48, 48, 48, 48, 48, -1}, {-1, 48, 0, 0, 0, 48, -1},{-1, 48, 0, 0, 0, 48, -1},{-1, 48, 0, 0, 0, 48, -1},{-1, 48, 48, 48, 48, 48, -1},{-1, -1, -1, -1, -1, -1, -1}},{
				{-1, 48, 48, 48, 48, 48, -1},{48, 0, 0, 0, 0, 0, 48},{48, 0, 0, 0, 0, 0, 48},{48, 0, 0, 0/*Spawner*/, 0, 0, 48},{48, 0, 0, 0, 0, 0, 48},{48, 0, 0, 0, 0, 0, 48},{-1, 48, 48, 48, 48, 48, -1}},{
				{-1, 48, 48, 48, 48, 48, -1},{48, 0, 0, 0, 0, 0, 48},{48, 0, 0, 0, 0, 0, 48},{48, 0, 0, 0, 0, 0, 48},{48, 0, 0, 0, 0, 0, 48},{48, 0, 0, 0, 0, 0, 48},{-1, 48, 48, 48, 48, 48, -1}},{
				{-1, -1, -1, -1, -1, -1, -1},{-1, 48, 48, 48, 48, 48, -1}, {-1, 48, 48, 48, 48, 48, -1},{-1, 48, 48, 48, 48, 48, -1},{-1, 48, 48, 48, 48, 48, -1},{-1, 48, 48, 48, 48, 48, -1},{-1, -1, -1, -1, -1, -1, -1}}};
		int specialArray[][] = {
				{3}, {2}, {3}, {-1}
		};
		generator.generate(genArray, specialArray, world, random, x, y, z, false);
		
	}
	
	void genSkeletonSpire(World world, Random random, int i, int k){
		WorldStructureStatic generator = new WorldStructureStatic();
		int x = i+8+random.nextInt(16);
		int y = 4 + random.nextInt(55+random.nextInt(7));
		int z = k+8+random.nextInt(16);
		int checkArray[][] = {
				{1,1,1}, //x
				{1,7,13}, //y
				{1,1,1}, //z
				{-3,0,-3} //id
				};
		if(!generator.initCheck(checkArray, world, x, y, z, false)) return;
		int reqArray[][][] = {{
			{-1, -1, -1},{-1, -1, -1},{-1, -1, -1}},{
			{-1, -1, -1},{-1, -3, -1},{-1, -1, -1}},{
			{-1, -1, -1},{-1, -1, -1},{-1, -1, -1}},{
			{-1, -1, -1},{-1, -1, -1},{-1, -1, -1}},{
			{-1, -1, -1},{-1, -1, -1},{-1, -1, -1}},{
			{-1, -1, -1},{-1, 0, -1},{-1, -1, -1}},{
			{-1, -1, -1},{-1, 0, -1},{-1, -1, -1}},{
			{-1, -1, -1},{-1, 0, -1},{-1, -1, -1}},{
			{-1, -1, -1},{-1, 0, -1},{-1, -1, -1}},{
			{-1, -1, -1},{-1, 0, -1},{-1, -1, -1}},{
			{-1, -1, -1},{-1, -1, -1},{-1, -1, -1}},{
			{-1, -1, -1},{-1, -1, -1},{-1, -1, -1}},{
			{-1, -1, -1},{-1, -1, -1},{-1, -1, -1}},{
			{-1, -1, -1},{-1, -3, -1},{-1, -1, -1}},{
			{-1, -1, -1},{-1, -1, -1},{-1, -1, -1}}};
		if(!generator.fullCheck(reqArray, world, x, y, z, false)) return;
		int[] lengthArray = new int[8];
		for(int j = 0; j < 8; j++){
			lengthArray[j] = 2-random.nextInt(random.nextInt(3)+1);
		}
		int genArray[][][] = {{
			{-1, 48, -1},{48, 48, 48},{-1, 48, -1}},{
			{48, 48, 48},{48, 48, 48},{48, 48, 48}},{
			{48, 48, 48},{48, 48, 48},{48, 48, 48}},{
			{-1, 48, -1},{48, 48, 48},{-1, 48, -1}},{
			{-1, (lengthArray[0] > 0) ? 48 : -1, -1},{(lengthArray[1] > 0) ? 48 : -1, 48, (lengthArray[2] > 0) ? 48 : -1},{-1, (lengthArray[3] > 0) ? 48 : -1, -1}},{
			{-1, (lengthArray[0] > 1) ? 48 : -1, -1},{(lengthArray[1] > 1) ? 48 : -1, 48, (lengthArray[2] > 1) ? 48 : -1},{-1, (lengthArray[3] > 1) ? 48 : -1, -1}},{
			{-1, -1, -1},{-1, 48, -1},{-1, -1, -1}},{
			{-1, -1, -1},{-1, 1/*Spawner*/, -1},{-1, -1, -1}},{
			{-1, -1, -1},{-1, 48, -1},{-1, -1, -1}},{
			{-1, (lengthArray[4] > 1) ? 48 : -1, -1},{(lengthArray[5] > 1) ? 48 : -1, 48, (lengthArray[6] > 1) ? 48 : -1},{-1, (lengthArray[7] > 1) ? 48 : -1, -1}},{
			{-1, (lengthArray[4] > 0) ? 48 : -1, -1},{(lengthArray[5] > 0) ? 48 : -1, 48, (lengthArray[6] > 0) ? 48 : -1},{-1, (lengthArray[7] > 0) ? 48 : -1, -1}},{
			{-1, 48, -1},{48, 48, 48},{-1, 48, -1}},{
			{48, 48, 48},{48, 48, 48},{48, 48, 48}},{
			{48, 48, 48},{48, 48, 48},{48, 48, 48}},{
			{-1, 48, -1},{48, 48, 48},{-1, 48, -1}},{
		}};
		int specialArray[][] = {
				{1}, {7}, {1}, {-1}
		};
		generator.generate(genArray, specialArray, world, random, x, y, z, false);
	}
	
	public void genSpiderDen(World world, Random random, int i, int k){
		WorldStructureStatic generator = new WorldStructureStatic();
		int x = i+8+random.nextInt(16);
		int y = 12 + random.nextInt(48);
		int z = k+8+random.nextInt(16);
		boolean flipped = random.nextBoolean();
		int checkArray[][] = {
				{9,9,7}, //x
				{1,1,1}, //y
				{3,5,4}, //z
				{0,0,-3} //id
				};
		if(!generator.initCheck(checkArray, world, x, y, z, flipped)) return;
		int reqArray[][][] = {{
			{-1, -1, -1, -1, -1, -1, -1, -1, -1},{-1, -1, -1, -1, -1, -1, -1, -1, -1},{-1, -1, -1, -1, -1, -1, -1, -1, -1},{-1, -1, -1, -1, -1, -1, -1, -1, -1},{-1, -1, -1, -1, -1, -1, -1, -1, -1},{-1, -1, -1, -1, -1, -1, -1, -1, -1},{-1, -1, -1, -1, -1, -1, -1, -1, -1},{-1, -1, -1, -1, -1, -1, -1, -1, -1},{-1, -1, -1, -1, -1, -1, -1, -1, -1},{-1, -1, -1, -1, -1, -1, -1, -1, -1}},{
			{-1, -1, -1, -1, -1, -1, -1, -1, -1},{-1, -1, -1, -3, -3, -3, -1, -1, -1},{-1, -1, -3, -3, -3, -3, -3, -1, -1},{-1, -1, -3, -3, -3, -3, -3, -1, -1},{-1, -1, -3, -3, -3, -3, -3, -1, -1},{-1, -1, -3, -3, -3, -3, -3, -1, -1},{-1, -1, -3, -3, -3, -3, -3, -1, -1},{-1, -1, -1, -3, -3, -3, -1, -1, -1},{-1, -1, -1, -1, -1, -1, -1, -1, -1},{-1, -1, -1, 0, 0, 0, -1, -1, -1}}};
		if(!generator.fullCheck(reqArray, world, x, y, z, flipped)) return;
		int[][][] genArray = {{
			{-1, -1, -1, -1, -1, -1, -1, -1, -1},{-1, -1, 48, 48, 48, 48, 48, -1, -1},{-1, 48, 48, 48, 48, 48, 48, 48, -1},{-1, 48, 48, 48, 48, 48, 48, 48, -1},{-1, 48, 48, 48, 48, 48, 48, 48, -1},{-1, 48, 48, 48, 48, 48, 48, 48, -1},{-1, 48, 48, 48, 48, 48, 48, 48, -1},{-1, -1, 48, 48, 48, 48, 48, -1, -1},{-1, -1, -1, -1, -1, -1, -1, -1, -1},{-1, -1, -1, -1, -1, -1, -1, -1, -1}},{
			{-1, -1, 48, 48, 48, 48, 48, -1, -1},{-1, 48, 0, 0, 0, 0, 0, 48, -1},{48, 0, 0, 0, 0, 0, 0, 0, 48},{48, 0, 0, 0, 0, 0, 0, 0, 48},{48, 0, 0, 0, 2/*Spawner*/, 0, 0, 0, 48},{48, 0, 0, 0, 0, 0, 0, 0, 48},{48, 0, 0, 0, 0, 0, 0, 0, 48},{-1, 48, 0, 0, 0, 0, 0, 48, -1},{-1, -1, 48, 0, 0, 0, 48, -1, -1},{-1, -1, -1, -1, -1, -1, -1, -1, -1}},{
			{-1, -1, -1, -1, -1, -1, -1, -1, -1},{-1, -1, 48, 48, 48, 48, 48, -1, -1},{-1, 48, 48, 48, 48, 48, 48, 48, -1},{-1, 48, 48, 48, 48, 48, 48, 48, -1},{-1, 48, 48, 48, 48, 48, 48, 48, -1},{-1, 48, 48, 48, 48, 48, 48, 48, -1},{-1, 48, 48, 48, 48, 48, 48, 48, -1},{-1, -1, 48, 48, 48, 48, 48, -1, -1},{-1, -1, -1, 48, 48, 48, -1, -1, -1},{-1, -1, -1, -1, -1, -1, -1, -1, -1}}};
		int specialArray[][] = {
				{4}, {1}, {4}, {-1}
		};
		generator.generate(genArray, specialArray, world, random, x, y, z, flipped);
	}

}
